### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Data {
  batery: Int!
  co2: Int!
  created_at: DateTime
  device_id: Int!
  id: Int!
  no2: Int!
  o2: Int!
}

input DataInput {
  batery: Int!
  co2: Int!
  device_id: Int!
  no2: Int!
  o2: Int!
}

type DataSubs {
  mutation: String!
  value: Data!
}

scalar DateTime

type Device {
  code: String!
  created_at: DateTime
  id: Int!
  name: String!
  owner_id: Int!
  pos_lat: String
  pos_lon: String
  updated_at: DateTime
}

input DeviceInput {
  code: String!
  name: String!
  pos_lat: String
  pos_lon: String
}

type DeviceSubscription {
  mutation: String!
  value: Device!
}

input LoginInput {
  password: String!
  username: String!
}

type LoginType {
  token: String
  user: User
}

type Mutation {
  createData(data: DataInput!): Data!
  createDevice(data: DeviceInput!): Device!
  deleteDevice(device_id: Int!): Device
  login(data: LoginInput!): LoginType!
  signup(data: SignupInput!): User!
  updateDevice(device_id: Int!): Device
}

type Query {
  getDatas(device_id: Int!, limit: Int, order: String, page: Int, sort: sort): [Data]
  getDevices(limit: Int, order: String, page: Int, search: String, sort: sort): [Device]
}

input SignupInput {
  name: String!
  password: String!
  username: String!
}

type Subscription {
  data(device_id: Int!): DataSubs!
  device: DeviceSubscription
}

type User {
  id: Int!
  name: String!
  username: String!
}

enum sort {
  asc
  desc
}