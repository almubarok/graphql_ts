/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { ContextI } from "./../../../types"


declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  DataInput: { // input type
    batery: number; // Int!
    co2: number; // Int!
    device_id: number; // Int!
    no2: number; // Int!
    o2: number; // Int!
  }
  DeviceInput: { // input type
    code: string; // String!
    name: string; // String!
    pos_lat?: string | null; // String
    pos_lon?: string | null; // String
  }
  LoginInput: { // input type
    password: string; // String!
    username: string; // String!
  }
  SignupInput: { // input type
    name: string; // String!
    password: string; // String!
    username: string; // String!
  }
}

export interface NexusGenEnums {
  sort: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Data: { // root type
    batery: number; // Int!
    co2: number; // Int!
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    device_id: number; // Int!
    id: number; // Int!
    no2: number; // Int!
    o2: number; // Int!
  }
  DataSubs: { // root type
    mutation: string; // String!
    value: NexusGenRootTypes['Data']; // Data!
  }
  Device: { // root type
    code: string; // String!
    created_at?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    name: string; // String!
    owner_id: number; // Int!
    pos_lat?: string | null; // String
    pos_lon?: string | null; // String
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  DeviceSubscription: { // root type
    mutation: string; // String!
    value: NexusGenRootTypes['Device']; // Device!
  }
  LoginType: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: {};
  Query: {};
  Subscription: {};
  User: { // root type
    id: number; // Int!
    name: string; // String!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Data: { // field return type
    batery: number; // Int!
    co2: number; // Int!
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    device_id: number; // Int!
    id: number; // Int!
    no2: number; // Int!
    o2: number; // Int!
  }
  DataSubs: { // field return type
    mutation: string; // String!
    value: NexusGenRootTypes['Data']; // Data!
  }
  Device: { // field return type
    code: string; // String!
    created_at: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    name: string; // String!
    owner_id: number; // Int!
    pos_lat: string | null; // String
    pos_lon: string | null; // String
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
  }
  DeviceSubscription: { // field return type
    mutation: string; // String!
    value: NexusGenRootTypes['Device']; // Device!
  }
  LoginType: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: { // field return type
    createData: NexusGenRootTypes['Data']; // Data!
    createDevice: NexusGenRootTypes['Device']; // Device!
    deleteDevice: NexusGenRootTypes['Device'] | null; // Device
    login: NexusGenRootTypes['LoginType']; // LoginType!
    signup: NexusGenRootTypes['User']; // User!
    updateDevice: NexusGenRootTypes['Device'] | null; // Device
  }
  Query: { // field return type
    getDatas: Array<NexusGenRootTypes['Data'] | null> | null; // [Data]
    getDevices: Array<NexusGenRootTypes['Device'] | null> | null; // [Device]
  }
  Subscription: { // field return type
    data: NexusGenRootTypes['DataSubs']; // DataSubs!
    device: NexusGenRootTypes['DeviceSubscription'] | null; // DeviceSubscription
  }
  User: { // field return type
    id: number; // Int!
    name: string; // String!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Data: { // field return type name
    batery: 'Int'
    co2: 'Int'
    created_at: 'DateTime'
    device_id: 'Int'
    id: 'Int'
    no2: 'Int'
    o2: 'Int'
  }
  DataSubs: { // field return type name
    mutation: 'String'
    value: 'Data'
  }
  Device: { // field return type name
    code: 'String'
    created_at: 'DateTime'
    id: 'Int'
    name: 'String'
    owner_id: 'Int'
    pos_lat: 'String'
    pos_lon: 'String'
    updated_at: 'DateTime'
  }
  DeviceSubscription: { // field return type name
    mutation: 'String'
    value: 'Device'
  }
  LoginType: { // field return type name
    token: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    createData: 'Data'
    createDevice: 'Device'
    deleteDevice: 'Device'
    login: 'LoginType'
    signup: 'User'
    updateDevice: 'Device'
  }
  Query: { // field return type name
    getDatas: 'Data'
    getDevices: 'Device'
  }
  Subscription: { // field return type name
    data: 'DataSubs'
    device: 'DeviceSubscription'
  }
  User: { // field return type name
    id: 'Int'
    name: 'String'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createData: { // args
      data: NexusGenInputs['DataInput']; // DataInput!
    }
    createDevice: { // args
      data: NexusGenInputs['DeviceInput']; // DeviceInput!
    }
    deleteDevice: { // args
      device_id: number; // Int!
    }
    login: { // args
      data: NexusGenInputs['LoginInput']; // LoginInput!
    }
    signup: { // args
      data: NexusGenInputs['SignupInput']; // SignupInput!
    }
    updateDevice: { // args
      device_id: number; // Int!
    }
  }
  Query: {
    getDatas: { // args
      device_id: number; // Int!
      limit?: number | null; // Int
      order?: string | null; // String
      page?: number | null; // Int
      sort?: NexusGenEnums['sort'] | null; // sort
    }
    getDevices: { // args
      limit?: number | null; // Int
      order?: string | null; // String
      page?: number | null; // Int
      search?: string | null; // String
      sort?: NexusGenEnums['sort'] | null; // sort
    }
  }
  Subscription: {
    data: { // args
      device_id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ContextI;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}